// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	models "github.com/lokmannicholas/delivery/pkg/models"
	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// OrdersRepository is an autogenerated mock type for the OrdersRepository type
type OrdersRepository struct {
	mock.Mock
}

// Find provides a mock function with given fields: db, page, limit
func (_m *OrdersRepository) Find(db *sql.DB, page uint64, limit uint64) ([]*models.Orders, error) {
	ret := _m.Called(db, page, limit)

	var r0 []*models.Orders
	if rf, ok := ret.Get(0).(func(*sql.DB, uint64, uint64) []*models.Orders); ok {
		r0 = rf(db, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Orders)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sql.DB, uint64, uint64) error); ok {
		r1 = rf(db, page, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: db, distance
func (_m *OrdersRepository) Insert(db *sql.DB, distance int) (*models.Orders, error) {
	ret := _m.Called(db, distance)

	var r0 *models.Orders
	if rf, ok := ret.Get(0).(func(*sql.DB, int) *models.Orders); ok {
		r0 = rf(db, distance)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Orders)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sql.DB, int) error); ok {
		r1 = rf(db, distance)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateById provides a mock function with given fields: db, id
func (_m *OrdersRepository) UpdateById(db *sql.DB, id int64) (*models.Orders, error) {
	ret := _m.Called(db, id)

	var r0 *models.Orders
	if rf, ok := ret.Get(0).(func(*sql.DB, int64) *models.Orders); ok {
		r0 = rf(db, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Orders)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sql.DB, int64) error); ok {
		r1 = rf(db, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
