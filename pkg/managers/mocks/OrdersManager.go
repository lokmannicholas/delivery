// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/lokmannicholas/delivery/pkg/models"
)

// OrdersManager is an autogenerated mock type for the OrdersManager type
type OrdersManager struct {
	mock.Mock
}

// GetOrders provides a mock function with given fields: ctx, page, limit
func (_m *OrdersManager) GetOrders(ctx context.Context, page uint64, limit uint64) ([]*models.Orders, error) {
	ret := _m.Called(ctx, page, limit)

	var r0 []*models.Orders
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint64) []*models.Orders); ok {
		r0 = rf(ctx, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Orders)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint64, uint64) error); ok {
		r1 = rf(ctx, page, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PlaceOrder provides a mock function with given fields: ctx, startCor, EndCor
func (_m *OrdersManager) PlaceOrder(ctx context.Context, startCor []string, EndCor []string) (*models.Orders, error) {
	ret := _m.Called(ctx, startCor, EndCor)

	var r0 *models.Orders
	if rf, ok := ret.Get(0).(func(context.Context, []string, []string) *models.Orders); ok {
		r0 = rf(ctx, startCor, EndCor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Orders)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string, []string) error); ok {
		r1 = rf(ctx, startCor, EndCor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TakeOrder provides a mock function with given fields: ctx, id
func (_m *OrdersManager) TakeOrder(ctx context.Context, id int64) (*models.Orders, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.Orders
	if rf, ok := ret.Get(0).(func(context.Context, int64) *models.Orders); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Orders)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
