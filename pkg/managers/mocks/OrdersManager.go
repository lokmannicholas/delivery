// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	models "github.com/lokmannicholas/delivery/pkg/models"
	mock "github.com/stretchr/testify/mock"
)

// OrdersManager is an autogenerated mock type for the OrdersManager type
type OrdersManager struct {
	mock.Mock
}

// GetOrders provides a mock function with given fields: page, limit
func (_m *OrdersManager) GetOrders(page uint64, limit uint64) ([]*models.Orders, error) {
	ret := _m.Called(page, limit)

	var r0 []*models.Orders
	if rf, ok := ret.Get(0).(func(uint64, uint64) []*models.Orders); ok {
		r0 = rf(page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Orders)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64, uint64) error); ok {
		r1 = rf(page, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PlaceOrder provides a mock function with given fields: startCor, EndCor
func (_m *OrdersManager) PlaceOrder(startCor []string, EndCor []string) (*models.Orders, error) {
	ret := _m.Called(startCor, EndCor)

	var r0 *models.Orders
	if rf, ok := ret.Get(0).(func([]string, []string) *models.Orders); ok {
		r0 = rf(startCor, EndCor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Orders)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string, []string) error); ok {
		r1 = rf(startCor, EndCor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TakeOrder provides a mock function with given fields: id
func (_m *OrdersManager) TakeOrder(id int64) (*models.Orders, error) {
	ret := _m.Called(id)

	var r0 *models.Orders
	if rf, ok := ret.Get(0).(func(int64) *models.Orders); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Orders)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
